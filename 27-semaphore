#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#define NUM_INSTANCES 4
sem_t S;
void *process(void *arg)
{
    int id = *((int *)arg);
    printf("Process P%d is waiting to acquire the resource...\n", id);
    sem_wait(&S);
    printf("Process P%d has acquired the resource!\n", id);
    sem_post(&S);
    printf("Process P%d has released the resource.\n", id);
    pthread_exit(NULL);
}
int main()
{
    int i;
    int num_processes = 4;
    pthread_t threads[num_processes];
    sem_init(&S, 0, NUM_INSTANCES);
    int process_ids[] = {1, 2, 3, 4};
    for (i = 0; i < num_processes; i++) 
    {
        pthread_create(&threads[i], NULL, process, (void *)&process_ids[i]);
    }
    for (i = 0; i < num_processes; i++) 
    {
        pthread_join(threads[i], NULL);
    }
    sem_destroy(&S);
    return 0;
}
