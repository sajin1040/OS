#include <stdio.h>
#include <stdbool.h>
#define NUM_PROCESSES 4
#define NUM_RESOURCES 3
int main() 
{
    int claim[NUM_PROCESSES][NUM_RESOURCES] = 
    {
        {3, 2, 2},
        {6, 1, 3},
        {3, 1, 4},
        {4, 2, 2}
    };
    int allocation[NUM_PROCESSES][NUM_RESOURCES] = 
    {
    {1, 0, 0},
    {6, 1, 2},
    {2, 1, 1},
    {0, 0, 2}
    };
    int available[NUM_RESOURCES] = {9, 3, 6};
    bool finish[NUM_PROCESSES] = {false};
    int need[NUM_PROCESSES][NUM_RESOURCES];
    for (int i = 0; i < NUM_PROCESSES; i++) 
    {
    for (int j = 0; j < NUM_RESOURCES; j++) 
    {
    need[i][j] = claim[i][j] - allocation[i][j];
    }
    }
    bool safe = true;
    int count = 0;
    while (count < NUM_PROCESSES) 
    {
    bool found = false;
    for (int i = 0; i < NUM_PROCESSES; i++) 
    {
    if (!finish[i]) 
    {
    bool can_allocate = true;
    for (int j = 0; j < NUM_RESOURCES; j++) 
    {
    if (need[i][j] > available[j])
    {
    can_allocate = false;
    break;
    }
    }
    if (can_allocate) 
    {
    found = true;
    finish[i] = true;
    for (int j = 0; j < NUM_RESOURCES; j++) 
    {
    available[j] += allocation[i][j];
    }
    count++;
    }
    }
    }
    if (!found) 
    {
    safe = false;
    break;
    }
    }
    if (safe) 
    {
    printf("The system is in a safe state.\n");
    } 
    else 
    {
    printf("The system is in an unsafe state.\n");
    }
    return 0;
}
