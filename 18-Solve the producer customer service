#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>
#define BUFFER_SIZE 3
int buffer[BUFFER_SIZE];
int count = 0;
int in = 0;
int out = 0;
sem_t mutex; 
sem_t full;
sem_t empty;
void *producer(void *arg)
{
    int item;
    for (int i = 0; i < 4; i++) 
    {
        item = rand(); 
        sem_wait(&empty); 
        sem_wait(&mutex); 
        buffer[in] = item; 
        in = (in + 1) % BUFFER_SIZE;
        count++; 
        printf("Produced item: %d\n", item);
        sem_post(&mutex); 
        sem_post(&full); 
    }
    return NULL;
}
void *consumer(void *arg)
{
    int item;
    for (int i = 0; i < 1; i++) 
    {
        sem_wait(&full);
        sem_wait(&mutex);
        item = buffer[out];
        out = (out + 1) % BUFFER_SIZE; 
        count--; 
        printf("Consumed item: %d\n", item);
        sem_post(&mutex); 
        sem_post(&empty); 
    }
    return NULL;
}
int main()
{
    sem_init(&mutex, 0, 1);
    sem_init(&full, 0, 0);
    sem_init(&empty, 0, BUFFER_SIZE);
    pthread_t producer_thread, consumer_thread;
    pthread_create(&producer_thread, NULL, producer, NULL);
    pthread_create(&consumer_thread, NULL, consumer, NULL);
    pthread_join(producer_thread, NULL);
    pthread_join(consumer_thread, NULL);
    sem_destroy(&mutex);
    sem_destroy(&full);
    sem_destroy(&empty);
    return 0;
}
